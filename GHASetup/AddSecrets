#! /bin/bash

set -x
set -euo pipefail

secretsDir="$1"
shift

secretVariables="$secretsDir/Variables.sh"

# shellcheck disable=SC1091
source "$secretVariables"

loadVariable() {
  local varName="$1"

  shift
  local varValue="${!varName}"

  if [ "$varValue" == "" ]; then
    echo "Variable $varName should be set in $secretVariables."
    exit 1
  fi
  echo "$varValue"
}

AuthKeyID=$(loadVariable AuthKeyID)
DeveloperName=$(loadVariable DeveloperName)
SecretNameForP12Password=$(loadVariable SecretNameForP12Password)
AuthKeyIssuerID=$(loadVariable AuthKeyIssuerID)

base64 "$secretsDir"/AppleWWDRCAG3.cer | gh secret set APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64
base64 "$secretsDir"/"AuthKey_$AuthKeyID.p8" | gh secret set APP_STORE_AUTHENTICATION_KEY_BASE64
base64 "$secretsDir"/"Apple Distribution - $DeveloperName.p12" | gh secret set EXPORT_CERTIFICATE_BASE64
base64 "$secretsDir"/"Apple Development - $DeveloperName.p12" | gh secret set BUILD_CERTIFICATE_BASE64
base64 "$secretsDir"/"Developer ID Application - $DeveloperName.p12" | gh secret set EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64

if [ "${ExportCustomProvisioningProfileFileName:-}" != "" ]; then
  base64 "$secretsDir/$ExportCustomProvisioningProfileFileName" | gh secret set EXPORT_CUSTOM_PROVISIONING_PROFILE_BASE64
fi

gh secret set APP_STORE_AUTHENTICATION_KEY_ISSUER_ID -b "$AuthKeyIssuerID"
gh secret set APP_STORE_AUTHENTICATION_KEY_ID -b "$AuthKeyID"
gh secret set KEYCHAIN_PASSWORD -b "$(openssl rand -base64 32)"
gh secret set P12_PASSWORD -b "$(security find-generic-password -s "$SecretNameForP12Password" -w)"

if [ "${GoogleAPIKey:-}" != "" ]; then
  gh secret set GOOGLE_API_KEY -b "$GoogleAPIKey"
fi
