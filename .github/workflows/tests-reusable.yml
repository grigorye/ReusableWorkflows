name: tests-reusable

on:
  workflow_call:
    inputs:
      runs-on:
        description: 'The type of machine to run the job on'
        required: false
        default: 'macos-12'
        type: string
      allScheme:
        required: true
        type: string
      testsScheme:
        required: true
        type: string
      snapshotsScheme:
        required: true
        type: string
    outputs:
      all-tests-passed:
        description: "All tests passed"
        value: ${{ jobs.tests.outputs.all-tests-passed }}
    secrets:
      APP_STORE_AUTHENTICATION_KEY_BASE64:
        required: true
      APP_STORE_AUTHENTICATION_KEY_ID:
        required: true
      APP_STORE_AUTHENTICATION_KEY_ISSUER_ID:
        required: true
      KEYCHAIN_PASSWORD:
        required: true
      P12_PASSWORD:
        required: true
      APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64:
        required: true
      BUILD_CERTIFICATE_BASE64:
        required: true
      EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64:
        required: true

defaults:
  run:
    shell: bash --noprofile --norc -x -euo pipefail {0}

jobs:
  tests:
    name: 'Tests'
    runs-on: ${{ inputs.runs-on }}

    outputs:
      all-tests-passed: ${{ steps.snapshots.outputs.differences-revealed != 'true' && steps.snapshots.conclusion == 'success' && steps.unit-tests.outputs.tests-failed != true && steps.unit-tests.conclusion == 'success' }}

    env:
      PROJECT_KIND: 'DeveloperID'
      RUN_STAMP: ${{ github.run_id }}.${{ github.run_attempt }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      KEYCHAIN_NAME: app-signing.keychain-db

    steps:
      - name: ACT preamble
        if: ${{ env.ACT }}
        shell: /bin/bash --noprofile --norc -x -euo pipefail {0}
        run: |
          ./GHALocal/bin/gh-runner-host-preamble

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Dump Environment
        run: |
          env | sort
          git --no-pager log -10 --pretty=format:"%h %ad %an %s"

      - name: Setup Environment
        run: |
          echo "DERIVED_DATA_PATH=$RUNNER_TEMP/build.derivedData" >> $GITHUB_ENV
          echo "XCRESULTS_DIRECTORY=$RUNNER_TEMP" >> $GITHUB_ENV
          echo "REGENERATED_SNAPSHOTS_ARCHIVE=$RUNNER_TEMP/Regenerated-Snapshots.${{ env.RUN_STAMP }}.tar.gz" >> $GITHUB_ENV

      - uses: maxim-lobanov/setup-xcode@v1.5.1
        if: ${{ !env.ACT }}
        with:
          xcode-version: 'latest'

      - name: Install Brew
        if: ${{ env.ACT }}
        run: |
          ./GHAShortcuts/InstallBrew

      - name: Install Dependencies
        run: |
          ./GHAShortcuts/InstallDependencies
          ./GHAShortcuts/InstallDependencies-tests

      - name: Cache Mint packages
        id: mint-cache
        uses: actions/cache@v2
        with:
          path: ~/.mint
          key: ${{ runner.os }}-${{ runner.temp }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: ${{ runner.os }}-${{ runner.temp }}-mint-

      - name: Install Mint packages
        if: steps.mint-cache.outputs.cache-hit != 'true'
        run: mint bootstrap

      - name: Create Keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          KEYCHAIN_PATH="$RUNNER_TEMP"/"$KEYCHAIN_NAME"

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"
          security list-keychain

      - name: Install certificates
        env:
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64: ${{ secrets.APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64 }}
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          EXPORT_CERTIFICATE_BASE64: ${{ secrets.EXPORT_CERTIFICATE_BASE64 }}
          EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64: ${{ secrets.EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64 }}
        run: |
          # create variables
          KEYCHAIN_PATH="$RUNNER_TEMP"/app-signing.keychain-db
          APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH="$RUNNER_TEMP"/apple_wwdr_ca.cer
          BUILD_CERTIFICATE_PATH="$RUNNER_TEMP"/build_certificate.p12
          EXPORT_CERTIFICATE_PATH="$RUNNER_TEMP"/export_certificate.p12
          EXPORT_CERTIFICATE_DEVELOPER_ID_PATH="$RUNNER_TEMP"/export_certificate_developer_id.p12

          # import certificate from secrets
          echo -n "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64" | base64 --decode -o "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH"
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o "$BUILD_CERTIFICATE_PATH"
          echo -n "$EXPORT_CERTIFICATE_BASE64" | base64 --decode -o "$EXPORT_CERTIFICATE_PATH"
          echo -n "$EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64" | base64 --decode -o "$EXPORT_CERTIFICATE_DEVELOPER_ID_PATH"

          # import certificate to keychain
          security import "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH" -k "$KEYCHAIN_PATH"
          security import "$BUILD_CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security import "$EXPORT_CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security import "$EXPORT_CERTIFICATE_DEVELOPER_ID_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"

      - name: Erase profiles remaining from previous builds
        run: |
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: actions/cache@v3
        if: ${{ false }}
        with:
          path: ${{ env.DERIVED_DATA_PATH }}/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('*.xcodeproj/**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: XcodeGen
        run: |
          mint run xcodegen -s XcodeGen/Variant/${{ env.PROJECT_KIND }}.yml -r . -p Xcodeproj

      - name: Build All
        run: |
          . ./Commands/Xcodebuild-env.sh
          xcodebuild \
            build \
            -project Xcodeproj/*-"$PROJECT_KIND".xcodeproj \
            -derivedDataPath "$DERIVED_DATA_PATH" \
            -disableAutomaticPackageResolution \
            -scheme '${{ inputs.allScheme }}' \
            | xcpretty

      - name: Run Unit Tests
        id: unit-tests
        run: |
          TESTS_XCRESULT="$XCRESULTS_DIRECTORY"/${{ inputs.testsScheme }}.xcresult
          echo "TESTS_XCRESULT=$TESTS_XCRESULT" >> $GITHUB_ENV

          exit_code=0
          ./GHAShortcuts/RunTests "${{ inputs.testsScheme }}" "$TESTS_XCRESULT" || exit_code=$?
          if [ "$exit_code" == "65" ]; then
            echo "tests-failed=true" >> $GITHUB_OUTPUT
          else
            exit "$exit_code"
          fi

      - name: Check Test Results
        uses: kishikawakatsumi/xcresulttool@v1.7.1
        with:
          path: ${{ env.TESTS_XCRESULT }}
          title: 'Test Results'
          upload-bundles: never
  
      - name: Exit on Tests Malfunction
        run: |
          ./GHAShortcuts/ExitOnTestsMalfunction "$TESTS_XCRESULT"

      - name: Run Snapshots
        id: snapshots
        run: |
          SNAPSHOTS_XCRESULT="$XCRESULTS_DIRECTORY"/${{ inputs.snapshotsScheme }}.xcresult
          echo "SNAPSHOTS_XCRESULT=$SNAPSHOTS_XCRESULT" >> $GITHUB_ENV

          exit_code=0
          ./GHAShortcuts/RunTests "${{ inputs.snapshotsScheme }}" "$SNAPSHOTS_XCRESULT" || exit_code=$?
          if [ "$exit_code" == "65" ]; then
            echo "differences-revealed=true" >> $GITHUB_OUTPUT
          else
            exit "$exit_code"
          fi

      - name: Check Snapshot Results
        uses: kishikawakatsumi/xcresulttool@v1.7.1
        with:
          path: ${{ env.SNAPSHOTS_XCRESULT }}
          title: 'Snapshot Results'
          upload-bundles: never

      - name: Exit on Snapshots Malfunction
        run: |
          ./GHAShortcuts/ExitOnTestsMalfunction "$SNAPSHOTS_XCRESULT"

      - name: Pull .xcresult for Snapshots
        if: ${{ env.ACT }}
        shell: bash --noprofile --norc -x -euo pipefail {0}
        run: |
          scp -pr "$REMOTE_RUNNER_USER"@host.docker.internal:"$SNAPSHOTS_XCRESULT".tar "$SNAPSHOTS_XCRESULT".tar

      - name: Save .xcresult for Snapshots
        uses: actions/upload-artifact@v3
        with:
          name: snapshots-xcresult
          if-no-files-found: error
          path: |
            ${{ env.SNAPSHOTS_XCRESULT }}.tar

      - name: Regenerate Snapshots
        if: ${{ steps.snapshots.outputs.differences-revealed }}
        run: |
          . ./Commands/Xcodebuild-env.sh
          stamp=$(mktemp /tmp/RegenerateSnapshots.XXXXXX)
          testExitCode=0
          env \
            TEST_RUNNER_SNAPSHOT_RECORDING=YES \
            \
            xcodebuild test \
            -project Xcodeproj/*-"$PROJECT_KIND".xcodeproj \
            -derivedDataPath "$DERIVED_DATA_PATH" \
            -disableAutomaticPackageResolution \
            -scheme '${{ inputs.snapshotsScheme }}' \
            | xcpretty \
            || testExitCode=${PIPESTATUS[0]}
          [ "$testExitCode" -eq 65 ] || exit "$testExitCode"
          find . -name '*.png' -newer "$stamp" -print0 | xargs -0 tar czf "$REGENERATED_SNAPSHOTS_ARCHIVE"

      - name: Pull Regenerated Snapshots
        if: ${{ env.ACT }}
        shell: bash --noprofile --norc -x -euo pipefail {0}
        run: |
          scp "$REMOTE_RUNNER_USER"@host.docker.internal:"$REGENERATED_SNAPSHOTS_ARCHIVE" "$REGENERATED_SNAPSHOTS_ARCHIVE"

      - name: Save Regenerated Snapshots
        if: ${{ steps.snapshots.outputs.differences-revealed }}
        uses: actions/upload-artifact@v3
        with:
          name: regenerated-snapshots
          if-no-files-found: error
          path: |
            ${{ env.REGENERATED_SNAPSHOTS_ARCHIVE }}

      - name: ACT epilogue
        if: ${{ env.ACT && always() }}
        shell: /bin/bash --noprofile --norc -x -euo pipefail {0}
        run: |
          ./GHALocal/bin/gh-runner-host-epilogue
